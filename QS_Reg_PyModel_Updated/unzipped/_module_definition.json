{"scope":"PUBLIC","source":"package QS_Reg_PyModel_Updated / overwrite=yes;\ndcl package pymas pm;\ndcl package logger logr('App.MM.Python.DS2');\ndcl varchar(32767) character set utf8 pypgm;\ndcl int resultCode revision;\n\nmethod score(varchar(100) \"JOB\",\nvarchar(100) \"REASON\",\ndouble \"CLAGE\",\ndouble \"CLNO\",\ndouble \"DEBTINC\",\ndouble \"DELINQ\",\ndouble \"DEROG\",\ndouble \"NINQ\",\ndouble \"YOJ\",\nin_out double resultCode,\nin_out double \"EM_EVENTPROBABILITY\",\nin_out varchar(100) \"EM_CLASSIFICATION\");\n\n   resultCode = revision = 0;\n   if null(pm) then do;\n      pm = _new_ pymas();\n      resultCode = pm.useModule('model_exec_90496973-1eef-479a-bc38-49b9612184e6', 1);\n      if resultCode then do;\n         resultCode = pm.appendSrcLine('import sys');\n         resultCode = pm.appendSrcLine('sys.path.append(\"/modules/9b3bc29c-1fb0-4bbb-85fd-0682bd4a7183/\")');\n         resultCode = pm.appendSrcLine('import settings_9b3bc29c_1fb0_4bbb_85fd_0682bd4a7183');\n         resultCode = pm.appendSrcLine('settings_9b3bc29c_1fb0_4bbb_85fd_0682bd4a7183.pickle_path = \"/modules/9b3bc29c-1fb0-4bbb-85fd-0682bd4a7183/\"');\n         resultCode = pm.appendSrcLine('import hmeq_logistic_score_daee1149_d94a_41e4_a681_b6014e21f052');\n         resultCode = pm.appendSrcLine('def score_hmeq_log_reg_model(REASON, JOB, YOJ, DEROG, DELINQ, CLAGE, NINQ, CLNO, DEBTINC):');\n         resultCode = pm.appendSrcLine('    \"Output: EM_CLASSIFICATION, EM_EVENTPROBABILITY\"');\n         resultCode = pm.appendSrcLine('    return hmeq_logistic_score_daee1149_d94a_41e4_a681_b6014e21f052.score_hmeq_log_reg_model(REASON, JOB, YOJ, DEROG, DELINQ, CLAGE, NINQ, CLNO, DEBTINC)');\n\n         revision = pm.publish(pm.getSource(), 'model_exec_90496973-1eef-479a-bc38-49b9612184e6');\n         if ( revision \u003c 1 ) then do;\n            logr.log( 'e', 'py.publish() failed.');\n            resultCode = -1;\n            return;\n         end;\n      end;\n   end;\n\n   resultCode = pm.useMethod('score_hmeq_log_reg_model');\n   if resultCode then do;\n      logr.log('E', 'useMethod() failed. resultCode=$s', resultCode);\n      return;\n   end;\n   resultCode = pm.setString('JOB', JOB);\n   if resultCode then\n      logr.log('E', 'setString for JOB failed.  resultCode=$s', resultCode);\n   resultCode = pm.setString('REASON', REASON);\n   if resultCode then\n      logr.log('E', 'setString for REASON failed.  resultCode=$s', resultCode);\n   resultCode = pm.setDouble('CLAGE', CLAGE);\n   if resultCode then\n      logr.log('E', 'setDouble for CLAGE failed.  resultCode=$s', resultCode);\n   resultCode = pm.setDouble('CLNO', CLNO);\n   if resultCode then\n      logr.log('E', 'setDouble for CLNO failed.  resultCode=$s', resultCode);\n   resultCode = pm.setDouble('DEBTINC', DEBTINC);\n   if resultCode then\n      logr.log('E', 'setDouble for DEBTINC failed.  resultCode=$s', resultCode);\n   resultCode = pm.setDouble('DELINQ', DELINQ);\n   if resultCode then\n      logr.log('E', 'setDouble for DELINQ failed.  resultCode=$s', resultCode);\n   resultCode = pm.setDouble('DEROG', DEROG);\n   if resultCode then\n      logr.log('E', 'setDouble for DEROG failed.  resultCode=$s', resultCode);\n   resultCode = pm.setDouble('NINQ', NINQ);\n   if resultCode then\n      logr.log('E', 'setDouble for NINQ failed.  resultCode=$s', resultCode);\n   resultCode = pm.setDouble('YOJ', YOJ);\n   if resultCode then\n      logr.log('E', 'setDouble for YOJ failed.  resultCode=$s', resultCode);\n   resultCode = pm.execute();\n   if (resultCode) then\n      logr.log('E', 'Error: pm.execute failed.  resultCode=$s', resultCode);\n   else do;\n      \"EM_EVENTPROBABILITY\" = pm.getDouble('EM_EVENTPROBABILITY');\n      \"EM_CLASSIFICATION\" = pm.getString('EM_CLASSIFICATION');\n   end;\nend;\n\n endpackage;","properties":[{"name":"sourceURI","value":"/modelRepository/models/9b3bc29c-1fb0-4bbb-85fd-0682bd4a7183"}]}