{"scope":"PUBLIC","source":"package QS_Reg_PyModel / overwrite=yes;\ndcl package pymas pm;\ndcl package logger logr('App.MM.Python.DS2');\ndcl varchar(32767) character set utf8 pypgm;\ndcl int resultCode revision;\n\nmethod score(varchar(100) \"JOB\",\nvarchar(100) \"REASON\",\ndouble \"CLAGE\",\ndouble \"CLNO\",\ndouble \"DEBTINC\",\ndouble \"DELINQ\",\ndouble \"DEROG\",\ndouble \"NINQ\",\ndouble \"YOJ\",\nin_out double resultCode,\nin_out double \"EM_EVENTPROBABILITY\",\nin_out varchar(100) \"EM_CLASSIFICATION\");\n\n   resultCode = revision = 0;\n   if null(pm) then do;\n      pm = _new_ pymas();\n      resultCode = pm.useModule('model_exec_8e9ba40e-0661-4768-b546-dacc1c40098d', 1);\n      if resultCode then do;\n         resultCode = pm.appendSrcLine('import sys');\n         resultCode = pm.appendSrcLine('sys.path.append(\"/modules/6da10709-ffe8-47bf-933c-0ff89d539bae/\")');\n         resultCode = pm.appendSrcLine('import settings_6da10709_ffe8_47bf_933c_0ff89d539bae');\n         resultCode = pm.appendSrcLine('settings_6da10709_ffe8_47bf_933c_0ff89d539bae.pickle_path = \"/modules/6da10709-ffe8-47bf-933c-0ff89d539bae/\"');\n         resultCode = pm.appendSrcLine('import hmeq_logistic_score_4ad17a31_a7b2_4c85_9662_08cabd3c8cba');\n         resultCode = pm.appendSrcLine('def scoreHMEQLogisticModel(JOB, REASON, CLAGE, CLNO, DEBTINC, DELINQ, DEROG, NINQ, YOJ):');\n         resultCode = pm.appendSrcLine('    \"Output: EM_EVENTPROBABILITY, EM_CLASSIFICATION\"');\n         resultCode = pm.appendSrcLine('    return hmeq_logistic_score_4ad17a31_a7b2_4c85_9662_08cabd3c8cba.scoreHMEQLogisticModel(JOB, REASON, CLAGE, CLNO, DEBTINC, DELINQ, DEROG, NINQ, YOJ)');\n\n         revision = pm.publish(pm.getSource(), 'model_exec_8e9ba40e-0661-4768-b546-dacc1c40098d');\n         if ( revision \u003c 1 ) then do;\n            logr.log( 'e', 'py.publish() failed.');\n            resultCode = -1;\n            return;\n         end;\n      end;\n   end;\n\n   resultCode = pm.useMethod('scoreHMEQLogisticModel');\n   if resultCode then do;\n      logr.log('E', 'useMethod() failed. resultCode=$s', resultCode);\n      return;\n   end;\n   resultCode = pm.setString('JOB', JOB);\n   if resultCode then\n      logr.log('E', 'setString for JOB failed.  resultCode=$s', resultCode);\n   resultCode = pm.setString('REASON', REASON);\n   if resultCode then\n      logr.log('E', 'setString for REASON failed.  resultCode=$s', resultCode);\n   resultCode = pm.setDouble('CLAGE', CLAGE);\n   if resultCode then\n      logr.log('E', 'setDouble for CLAGE failed.  resultCode=$s', resultCode);\n   resultCode = pm.setDouble('CLNO', CLNO);\n   if resultCode then\n      logr.log('E', 'setDouble for CLNO failed.  resultCode=$s', resultCode);\n   resultCode = pm.setDouble('DEBTINC', DEBTINC);\n   if resultCode then\n      logr.log('E', 'setDouble for DEBTINC failed.  resultCode=$s', resultCode);\n   resultCode = pm.setDouble('DELINQ', DELINQ);\n   if resultCode then\n      logr.log('E', 'setDouble for DELINQ failed.  resultCode=$s', resultCode);\n   resultCode = pm.setDouble('DEROG', DEROG);\n   if resultCode then\n      logr.log('E', 'setDouble for DEROG failed.  resultCode=$s', resultCode);\n   resultCode = pm.setDouble('NINQ', NINQ);\n   if resultCode then\n      logr.log('E', 'setDouble for NINQ failed.  resultCode=$s', resultCode);\n   resultCode = pm.setDouble('YOJ', YOJ);\n   if resultCode then\n      logr.log('E', 'setDouble for YOJ failed.  resultCode=$s', resultCode);\n   resultCode = pm.execute();\n   if (resultCode) then\n      logr.log('E', 'Error: pm.execute failed.  resultCode=$s', resultCode);\n   else do;\n      \"EM_EVENTPROBABILITY\" = pm.getDouble('EM_EVENTPROBABILITY');\n      \"EM_CLASSIFICATION\" = pm.getString('EM_CLASSIFICATION');\n   end;\nend;\n\n endpackage;","properties":[{"name":"sourceURI","value":"/modelRepository/models/6da10709-ffe8-47bf-933c-0ff89d539bae"}]}